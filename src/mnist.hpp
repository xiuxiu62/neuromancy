#pragma once

#include "core/types.h"
#include "nn.hpp"

namespace mnist {
struct Digit {
    static constexpr usize WIDTH = 5;
    static constexpr usize HEIGHT = 7;
    static constexpr usize PIXEL_COUNT = WIDTH * HEIGHT;
    static constexpr usize DIGIT_COUNT = 10;

    f32 pixels[PIXEL_COUNT];
    f32 label[DIGIT_COUNT];
};

static Digit data_set[] = {
    // clang-format off
    // 0
    {
        {
            1,1,1,1,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
        },
        {1,0,0,0,0,0,0,0,0,0},
    },
    // 1
    {
        {
            0,0,1,0,0, //
            0,1,1,0,0, //
            0,0,1,0,0, //
            0,0,1,0,0, //
            0,0,1,0,0, //
            0,0,1,0,0, //
            0,1,1,1,0, //
        },
        {0,1,0,0,0,0,0,0,0,0},
    },
    // 2
    {
        {
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            1,1,1,1,1, //
            1,0,0,0,0, //
            1,0,0,0,0, //
            1,1,1,1,1, //
        },
        {0,0,1,0,0,0,0,0,0,0},
    },
    // 3
    {
        {
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            1,1,1,1,1, //
        },
        {0,0,0,1,0,0,0,0,0,0},
    },
    // 4
    {
        {
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
        },
        {0,0,0,0,1,0,0,0,0,0},
    },
    // 5
    {
        {
            1,1,1,1,1, //
            1,0,0,0,0, //
            1,0,0,0,0, //
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            1,1,1,1,1, //
        },
        {0,0,0,0,0,1,0,0,0,0},
    },
    // 6
    {
        {
            1,1,1,1,1, //
            1,0,0,0,0, //
            1,0,0,0,0, //
            1,1,1,1,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
        },
        {0,0,0,0,0,0,1,0,0,0},
    },
    // 7
    {
        {
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,1,0, //
            0,0,1,0,0, //
            0,1,0,0,0, //
            0,1,0,0,0, //
            0,1,0,0,0, //
        },
        {0,0,0,0,0,0,0,1,0,0},
    },
    // 8
    {
        {
            1,1,1,1,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
        },
        {0,0,0,0,0,0,0,0,1,0},
    },
    // 9
    {
        {
            1,1,1,1,1, //
            1,0,0,0,1, //
            1,0,0,0,1, //
            1,1,1,1,1, //
            0,0,0,0,1, //
            0,0,0,0,1, //
            1,1,1,1,1, //
        },
        {0,0,0,0,0,0,0,0,0,1},
    },
    // clang-format on
};

static Digit test_data[] = {
    // Noisy 0
    {
        {
            1, 1, 1, 1, 1, //
            1, 0, 1, 0, 1, //
            1, 1, 0, 0, 1, //
            1, 0, 0, 1, 1, //
            1, 0, 1, 0, 1, //
            1, 0, 0, 1, 1, //
            1, 1, 1, 1, 1, //
        },
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    // Broken 1
    {
        {
            0, 0, 1, 0, 0, //
            0, 1, 1, 0, 0, //
            0, 0, 1, 0, 0, //
            0, 0, 0, 0, 0, // gap
            0, 0, 1, 0, 0, //
            0, 0, 1, 0, 0, //
            0, 1, 1, 1, 0, //
        },
        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    // Short 2
    {
        {
            1, 1, 1, 1, 1, //
            0, 0, 0, 0, 1, //
            0, 0, 0, 1, 0, //
            0, 1, 1, 0, 0, //
            1, 0, 0, 0, 0, //
            1, 1, 1, 1, 1, // removed one row
            0, 0, 0, 0, 0, //
        },
        {0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    },
    // Thick 3
    {
        {
            1, 1, 1, 1, 1, //
            0, 0, 0, 1, 1, //
            0, 0, 0, 1, 1, //
            1, 1, 1, 1, 1, //
            0, 0, 0, 1, 1, //
            0, 0, 0, 1, 1, //
            1, 1, 1, 1, 1, //
        },
        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    },
    // Slanted 4
    {
        {
            1, 0, 0, 1, 1, //
            1, 0, 0, 1, 0, //
            1, 0, 1, 0, 0, //
            1, 1, 1, 1, 1, //
            0, 0, 1, 0, 0, //
            0, 0, 1, 0, 0, //
            0, 0, 1, 0, 0, //
        },
        {0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
    },
};

struct ModelConfig {
    f32 learning_rate;
    usize *layer_sizes;
    Digit *training_data;
    Digit *testing_data;
    usize epochs;
};

void test_network(Network &network, Digit *training_data, usize training_data_count);

void run(ModelConfig config, bool training);
}; // namespace mnist
